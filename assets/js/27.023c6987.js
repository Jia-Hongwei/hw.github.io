(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{344:function(a,s,e){"use strict";e.r(s);var t=e(7),n=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"_1-垃圾收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-垃圾收集器"}},[a._v("#")]),a._v(" 1. 垃圾收集器")]),a._v(" "),s("h3",{attrs:{id:"_1-1-serial"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-serial"}},[a._v("#")]),a._v(" 1.1 Serial")]),a._v(" "),s("p",[a._v("Serial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK1.3.1之前）是虚拟机新生代收集的唯一\n选择。\n它是一种单线程收集器，不仅仅意味着它只会使用一个CPU或者一条收集线程去完成垃圾收集工作，更\n重要的是其在进行垃圾收集的时候需要暂停其他线程。")]),a._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("优点：简单高效，拥有很高的单线程收集效率\n缺点：收集过程需要暂停所有线程\n算法：复制算法\n适用范围：新生代\n应用：Client模式下的默认新生代收集器\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.7j0tc8jqg4s0.webp"}}),a._v(" "),s("h3",{attrs:{id:"_1-2-serial-old"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-serial-old"}},[a._v("#")]),a._v(" 1.2 Serial Old")]),a._v(" "),s("p",[a._v('Serial Old收集器是Serial收集器的老年代版本，也是一个单线程收集器，不同的是采用"标记-整理算\n法"，运行过程和Serial收集器一样。\n'),s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.yj4hu5rwc3k.webp"}})]),a._v(" "),s("h3",{attrs:{id:"_1-3-parnew"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-parnew"}},[a._v("#")]),a._v(" 1.3 ParNew")]),a._v(" "),s("p",[a._v("可以把这个收集器理解为Serial收集器的多线程版本。")]),a._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("优点：在多CPU时，比Serial效率高。\n缺点：收集过程暂停所有应用程序线程，单CPU时比Serial效率差。\n算法：复制算法\n适用范围：新生代\n应用：运行在Server模式下的虚拟机中首选的新生代收集器\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.49xv6tdae0w0.webp"}}),a._v(" "),s("h3",{attrs:{id:"_1-4-parallel-scavenge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-parallel-scavenge"}},[a._v("#")]),a._v(" 1.4 Parallel Scavenge")]),a._v(" "),s("p",[s("strong",[a._v("Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器，看上去和ParNew一样，但是Parallel Scanvenge更关注系统的吞吐量")]),a._v("。")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("吞吐量=运行用户代码的时间/(运行用户代码的时间+垃圾收集时间)")])]),a._v(" "),s("p",[s("strong",[a._v("比如虚拟机总共运行了100分钟，垃圾收集时间用了1分钟，吞吐量=(100-1)/100=99%。")])]),a._v(" "),s("p",[s("strong",[a._v("若吞吐量越大，意味着垃圾收集的时间越短，则用户代码可以充分利用CPU资源，尽快完成程序的运算任务。")])])]),a._v(" "),s("blockquote",[s("p",[a._v("-XX:MaxGCPauseMillis控制最大的垃圾收集停顿时间，")]),a._v(" "),s("p",[a._v("-XX:GCRatio直接设置吞吐量的大小。")])]),a._v(" "),s("h3",{attrs:{id:"_1-5-parallel-old"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-parallel-old"}},[a._v("#")]),a._v(" 1.5 Parallel Old")]),a._v(" "),s("p",[s("strong",[a._v("Parallel Old收集器是Parallel Scavenge收集器的老年代版本，使用多线程和标记-整理算法")]),a._v("进行垃圾回收，也是更加关注系统的"),s("strong",[a._v("吞吐量")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"_1-6-cms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-cms"}},[a._v("#")]),a._v(" 1.6 CMS")]),a._v(" "),s("p",[s("code",[a._v("官网")]),a._v("： "),s("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/cms.html#concurrent_mark_sweep_cms_collector",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/cms.html#concurrent_mark_sweep_cms_collector"),s("OutboundLink")],1),a._v(" "),s("strong",[a._v("CMS(Concurrent Mark Sweep)收集器是一种以获取")]),a._v(" "),s("code",[a._v("最短回收停顿时间")]),a._v("为目标的收集器。\n"),s("strong",[a._v('采用的是"标记-清除算法",整个过程分为4步')])]),a._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("(1)初始标记 CMS initial mark 标记GC Roots直接关联对象，不用Tracing，速度很快\n(2)并发标记 CMS concurrent mark  进行GC Roots Tracing\n(3)重新标记 CMS remark 修改并发标记因用户程序变动的内容\n(4)并发清除 CMS concurrent sweep 清除不可达对象回收空间，同时有新垃圾产生，留着下次清理称为浮动垃圾\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[s("strong",[a._v("由于整个过程中，并发标记和并发清除，收集器线程可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行的。")]),a._v(" "),s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.60u4ls3ymx.webp"}})]),a._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("优点：并发收集、低停顿\n缺点：产生大量空间碎片、并发阶段会降低吞吐量\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h3",{attrs:{id:"_1-7-g1-garbage-first"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-g1-garbage-first"}},[a._v("#")]),a._v(" 1.7 G1(Garbage-First)")]),a._v(" "),s("p",[s("code",[a._v("官网")]),a._v("： "),s("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/g1_gc.html#garbage_first_garbage_collection",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/g1_gc.html#garbage_first_garbage_collection"),s("OutboundLink")],1)]),a._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("使用G1收集器时，Java堆的内存布局与就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。\n每个Region大小都是一样的，可以是1M到32M之间的数值，但是必须保证是2的n次幂\n如果对象太大，一个Region放不下[超过Region大小的50%]，那么就会直接放到H中\n设置Region大小：-XX:G1HeapRegionSize=**&lt;N>**M**\n所谓Garbage-Frist，其实就是优先回收垃圾最多的Region区域\n（1）分代收集（仍然保留了分代的概念）\n（2）空间整合（整体上属于“标记-整理”算法，不会导致空间碎片）\n（3）可预测的停顿（比CMS更先进的地方在于能让使用者明确指定一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒）\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.b8sa7fyoh.webp"}}),a._v(" "),s("p",[a._v("工作过程可以分为如下几步:")]),a._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("初始标记（Initial Marking）   标记以下GC Roots能够关联的对象，并且修改TAMS的值，需要暂停用户线程\n并发标记（Concurrent Marking） 从GC Roots进行可达性分析，找出存活的对象，与用户线程并发执行\n最终标记（Final Marking）  修正在并发标记阶段因为用户程序的并发执行导致变动的数据，需暂停用户线程\n筛选回收（Live Data Counting and Evacuation） 对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间制定回收计划\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.4n7lhr0niy.webp"}}),a._v(" "),s("h3",{attrs:{id:"_1-8-zgc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-zgc"}},[a._v("#")]),a._v(" 1.8 ZGC")]),a._v(" "),s("p",[s("code",[a._v("官网")]),a._v("： "),s("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/gctuning/z-garbage-collector1.html#GUID-A5A42691-095E-47BA-B6DC-FB4E5FAA43D0",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://docs.oracle.com/en/java/javase/11/gctuning/z-garbage-collector1.html#GUID-A5A42691-095E-47BA-B6DC-FB4E5FAA43D0"),s("OutboundLink")],1)]),a._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v(">**JDK11新引入的ZGC收集器，不管是物理上还是逻辑上，ZGC中已经不存在新老年代的概念了**\n> **会分为一个个page，当进行GC操作时会对page进行压缩，因此没有碎片问题**\n> \n> **只能在64位的linux上使用，目前用得还比较少**\n> \n> **（1）可以达到10ms以内的停顿时间要求**\n> \n> **（2）支持TB级别的内存**\n> \n> **（3）堆内存变大后停顿时间还是在10ms以内**\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);