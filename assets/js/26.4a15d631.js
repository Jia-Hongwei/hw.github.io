(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{345:function(s,a,t){"use strict";t.r(a);var e=t(7),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_1-如何确定一个对象是垃圾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何确定一个对象是垃圾"}},[s._v("#")]),s._v(" 1. 如何确定一个对象是垃圾？")]),s._v(" "),a("h3",{attrs:{id:"_1-1-引用计数法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-引用计数法"}},[s._v("#")]),s._v(" 1.1 引用计数法")]),s._v(" "),a("blockquote",[a("p",[s._v("对于某个对象而言，只要应用程序中持有该对象的引用，就说明该对象不是垃圾，如果一个对象没有任\n何指针对其\n引用，它就是垃圾。")])]),s._v(" "),a("blockquote",[a("p",[s._v("弊端 :如果AB相互持有引用，导致永远不能被回收。")])]),s._v(" "),a("h3",{attrs:{id:"_1-2-可达性分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-可达性分析"}},[s._v("#")]),s._v(" 1.2 可达性分析")]),s._v(" "),a("blockquote",[a("p",[s._v("通过GC Root的对象，开始向下寻找，看某个对象是否可达")])]),s._v(" "),a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.3em5oxpq1ns0.png"}}),s._v(" "),a("blockquote",[a("p",[s._v("能作为GC Root:类加载器、Thread、虚拟机栈的本地变量表、static成员、常量引用、本地方法栈\n的变量等。")])]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("虚拟机栈（栈帧中的本地变量表）中引用的对象。\n方法区中类静态属性引用的对象。\n方法区中常量引用的对象。\n本地方法栈中JNI（即一般说的Native方法）引用的对象。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_1-3-什么时候会垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-什么时候会垃圾回收"}},[s._v("#")]),s._v(" 1.3 什么时候会垃圾回收")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("GC是由JVM自动完成的，根据JVM系统环境而定，所以时机是不确定的。\n当然，我们可以手动进行垃圾回收，比如调用System.gc()方法通知JVM进行一次垃圾回收，但是\n具体什么时刻运行也无法控制。也就是说System.gc()只是通知要回收，什么时候回收由JVM决\n定。但是不建议手动调用该方法，因为GC消耗的资源比较大。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("（1）当Eden区或者S区不够用了\n（2）老年代空间不够用了\n（3）方法区空间不够用了\n（4）System.gc()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"_2-垃圾收集算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-垃圾收集算法"}},[s._v("#")]),s._v(" 2. 垃圾收集算法")]),s._v(" "),a("h3",{attrs:{id:"_2-1-标记-清除-mark-sweep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-标记-清除-mark-sweep"}},[s._v("#")]),s._v(" 2.1 标记-清除(Mark-Sweep)")]),s._v(" "),a("ul",[a("li",[s._v("标记")])]),s._v(" "),a("blockquote",[a("p",[s._v("找出内存中需要回收的对象，并且把它们标记出来\n此时堆中所有的对象都会被扫描一遍，从而才能确定需要回收的对象，比较耗时\n"),a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.72pdmuwp0bg0.webp"}})])]),s._v(" "),a("ul",[a("li",[s._v("清除")])]),s._v(" "),a("blockquote",[a("p",[s._v("清除掉被标记需要回收的对象，释放出对应的内存空间\n"),a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.4fxw9q7zbu00.webp"}})])]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("缺点：\n  标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程\n  序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n  (1)标记和清除两个过程都比较耗时，效率不高\n  (2)会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无\n  法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"_2-2-标记-复制-mark-copying"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-标记-复制-mark-copying"}},[s._v("#")]),s._v(" 2.2 标记-复制(Mark-Copying)")]),s._v(" "),a("blockquote",[a("p",[s._v("将内存划分为两块相等的区域，每次只使用其中一块，如下图所示：")])]),s._v(" "),a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.502743pdrt80.webp"}}),s._v(" "),a("blockquote",[a("p",[s._v("当其中一块内存使用完了，就将还存活的对象复制到另外一块上面，然后把已经使用过的内存空间一次\n清除掉。\n"),a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.1hrx17xmz0xs.webp"}})])]),s._v(" "),a("blockquote",[a("p",[s._v("缺点: 空间利用率降低。")])]),s._v(" "),a("h3",{attrs:{id:"_2-3-标记-整理-mark-compact"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-标记-整理-mark-compact"}},[s._v("#")]),s._v(" 2.3 标记-整理(Mark-Compact)")]),s._v(" "),a("blockquote",[a("p",[s._v("复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不\n想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都有\n100%存活的极端情况，所以老年代一般不能直接选用这种算法。")])]),s._v(" "),a("blockquote",[a("p",[s._v('标记过程仍然与"标记-清除"算法一样，但是后续步骤不是直接对可回收对象进行清理，而是让所有存活\n的对象都向一端移动，然后直接清理掉端边界以外的内存。')])]),s._v(" "),a("blockquote",[a("p",[s._v('其实上述过程相对"复制算法"来讲，少了一个"保留区"')])]),s._v(" "),a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.jcgaq9kmzig.webp"}}),s._v(" "),a("blockquote",[a("p",[s._v("让所有存活的对象都向一端移动，清理掉边界意外的内存。")])]),s._v(" "),a("img",{attrs:{src:"https://jsd.cdn.zzko.cn/gh/Jia-Hongwei/picx-images-hosting@master/image.694sakluix80.webp"}}),s._v(" "),a("h2",{attrs:{id:"_3-分代收集算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-分代收集算法"}},[s._v("#")]),s._v(" 3. 分代收集算法")]),s._v(" "),a("blockquote",[a("p",[s._v("既然上面介绍了3中垃圾收集算法，那么在堆内存中到底用哪一个呢？")])]),s._v(" "),a("blockquote",[a("p",[s._v("Young区：复制算法(对象在被分配之后，可能生命周期比较短，Young区复制效率比较高)")]),s._v(" "),a("p",[s._v("Old区：标记清除或标记整理(Old区对象存活时间比较长，复制来复制去没必要，不如做个标记再清理)")])])])}),[],!1,null,null,null);a.default=n.exports}}]);